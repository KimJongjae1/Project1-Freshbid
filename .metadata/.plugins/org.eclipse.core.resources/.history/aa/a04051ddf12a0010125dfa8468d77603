import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.List;
import java.util.StringTokenizer;

public class Solution {
	
 
	 //left              right
	 public static void main(String[] args) throws IOException{
		   BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		   StringBuilder sb=new StringBuilder();
		   StringTokenizer st=new StringTokenizer(br.readLine());
		   int N=Integer.parseInt(st.nextToken());
		   int M=Integer.parseInt(st.nextToken());
		  int[] prev=new int[1000001];
		  int[] nxt=new int[1000001];
		   
		   st=new StringTokenizer(br.readLine());
		   int start=Integer.parseInt(st.nextToken());
		   int before=start;
		   for(int i=1;i<N;i++) {
			   int n=Integer.parseInt(st.nextToken());
			   
			   prev[n]=before;
			   nxt[before]=n;
			   before=n;
			   
		   }
		   
		   prev[start]=before;
		   nxt[before]=start;
		   
		   
		   for(int i=0;i<M;i++) {
			   st=new StringTokenizer(br.readLine());
			   String order=st.nextToken();
			   switch(order) {
			   	 
			   case "BN":
				   int n = Integer.parseInt(st.nextToken());//5
				   int newN=Integer.parseInt(st.nextToken());//11
				   int nNext=nxt[n];//2
				   sb.append(nNext).append("\n");
				   prev[newN]=n;//5
				   nxt[newN]=nNext;//2
				   nxt[n]=newN;
				   prev[nNext]=newN;
				   break;
			   
			   case "BP":
				   n = Integer.parseInt(st.nextToken());
				   newN=Integer.parseInt(st.nextToken());
				   int nPrev=prev[n];
				   sb.append(nPrev).append("\n");
				   prev[newN]=nPrev;
				   nxt[newN]=n;
				   prev[n]=newN;
				   nxt[nPrev]=newN;
				   break;
				   
			   case "CN":
				   n = Integer.parseInt(st.nextToken());
				   nNext=nxt[n];
				   int nNNext=nxt[nNext];
				   sb.append(nNext).append("\n");
				   nxt[nNext]=0;
				   prev[nNext]=0;
				   nxt[n]=nNNext;
				   prev[nNNext]=n;
				   break;
				   
				   
			   case "CP":
				   n = Integer.parseInt(st.nextToken());
				   nPrev=prev[n];
				   int nPPrev=prev[nPrev];
				   sb.append(nPrev).append("\n");
				   nxt[nPrev]=0;
				   prev[nPrev]=0;
				   prev[n]=nPPrev;
				   nxt[nPPrev]=n;
				   break;
			   }
			   
		   }
		   System.out.println(sb);
		   
	 }

}
